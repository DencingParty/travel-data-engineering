-- 1-1. 여행 시도별 방문 빈도
-- 여행 지역별 방문 빈도 계산 및 저장
DROP TABLE IF EXISTS REGION_ANALYSIS.REGION_VISIT_COUNT;

CREATE TABLE REGION_ANALYSIS.REGION_VISIT_COUNT AS
    SELECT T.TRAVEL_START_YMD, T.TRAVEL_END_YMD, V.SIDO_SGG, V.SIDO, V.SGG
    FROM REGION_RAW_DATA.TRAVEL AS T
    INNER JOIN REGION_PROCESSED_DATA.VISIT_AREA_INFO AS V
        ON T.TRAVEL_ID = V.TRAVEL_ID;

-- 1-2. 시도별 여행 빈도 COUNTRY MAP 그리기 위한 테이블
DROP TABLE IF EXISTS REGION_ANALYSIS.REGION_VISIT_MAP;

CREATE TABLE REGION_ANALYSIS.REGION_VISIT_MAP AS
    SELECT 
        T.TRAVEL_START_YMD, T.TRAVEL_END_YMD, V.X_COORD, V.Y_COORD, V.SIDO_SGG, V.SIDO, V.SGG,
        CASE 
            WHEN V.SIDO = '부산' THEN 'KR-26'
            WHEN V.SIDO = '충북' THEN 'KR-43'
            WHEN V.SIDO = '충남' THEN 'KR-44'
            WHEN V.SIDO = '대구' THEN 'KR-27'
            WHEN V.SIDO = '대전' THEN 'KR-30'
            WHEN V.SIDO = '강원' THEN 'KR-42'
            WHEN V.SIDO = '광주' THEN 'KR-29'
            WHEN V.SIDO = '경기' THEN 'KR-41'
            WHEN V.SIDO = '경북' THEN 'KR-47'
            WHEN V.SIDO = '경남' THEN 'KR-48'
            WHEN V.SIDO = '인천' THEN 'KR-28'
            WHEN V.SIDO = '제주' THEN 'KR-49'
            WHEN V.SIDO = '전북' THEN 'KR-45'
            WHEN V.SIDO = '전남' THEN 'KR-46'
            WHEN V.SIDO = '세종' THEN 'KR-50'
            WHEN V.SIDO = '서울' THEN 'KR-11'
            WHEN V.SIDO = '울산' THEN 'KR-31'
            ELSE NULL
        END AS ISO_3166_2_CODE
    FROM 
        REGION_RAW_DATA.TRAVEL AS T
    INNER JOIN 
        REGION_PROCESSED_DATA.VISIT_AREA_INFO AS V
        ON T.TRAVEL_ID = V.TRAVEL_ID;

-- 2. 시도별 활동 유형 분포
DROP TABLE IF EXISTS REGION_ANALYSIS.REGION_ACTIVITY_DISTRIBUTION;

CREATE TABLE REGION_ANALYSIS.REGION_ACTIVITY_DISTRIBUTION AS
    SELECT V.SIDO_SGG, V.SIDO, V.SGG, MA.CD_NM
    FROM REGION_PROCESSED_DATA.VISIT_AREA_INFO AS V
    INNER JOIN REGION_RAW_DATA.META_ACTIVITY AS A
        ON V.VISIT_AREA_ID = A.VISIT_AREA_ID
        AND V.TRAVEL_ID = A.TRAVEL_ID
    INNER JOIN (SELECT CD_A, CD_B, CD_NM FROM REGION_PROCESSED_DATA.META_CODEB_DISTINCT WHERE CD_A='ACT') AS MA
        ON A.ACTIVITY_TYPE_CD = MA.CD_B;

-- 4-2-1. 시도별 활동 소비 금액 Heatmap
DROP TABLE IF EXISTS REGION_ANALYSIS.REGION_ACTIVITY_PRICE;

CREATE TABLE REGION_ANALYSIS.REGION_ACTIVITY_PRICE AS
    SELECT V.SIDO_SGG, V.SIDO, V.SGG, AC.PAYMENT_AMT_WON, AC.ACTIVITY_TYPE_CD, MA.CD_NM
    FROM REGION_RAW_DATA.ACTIVITY_CONSUME AS AC
    INNER JOIN REGION_RAW_DATA.TRAVEL AS T
        ON AC.TRAVEL_ID = T.TRAVEL_ID
    INNER JOIN REGION_PROCESSED_DATA.VISIT_AREA_INFO AS V
        ON AC.VISIT_AREA_ID = V.VISIT_AREA_ID
            AND AC.TRAVEL_ID = V.TRAVEL_ID
    INNER JOIN (SELECT CD_A, CD_B, CD_NM FROM REGION_PROCESSED_DATA.META_CODEB_DISTINCT WHERE CD_A='ACT') AS MA
        ON AC.ACTIVITY_TYPE_CD = MA.CD_B;

-- 4-2-2. 소비 활동 지도, 유형별 활동 소비 금액
-- REGION_ANALYSIS.ACTIVITY_CONSUME_BY_AREA 테이블 이용
DROP TABLE IF EXISTS region_analysis.activity_consume_by_area;

CREATE TABLE region_analysis.activity_consume_by_area AS
SELECT 
    STORE_NM,
    CASE 
        WHEN ACTIVITY_TYPE_CD = 1 THEN '취식'
        WHEN ACTIVITY_TYPE_CD = 2 THEN '쇼핑/구매'
        WHEN ACTIVITY_TYPE_CD = 3 THEN '체험 활동/입장 및 관람'
        WHEN ACTIVITY_TYPE_CD = 4 THEN '단순 구경/산책/걷기'
        WHEN ACTIVITY_TYPE_CD = 5 THEN '휴식'
        ELSE '기타 활동'
    END AS ACTIVITY_TYPE,
    PAYMENT_AMT_WON,
    X_COORD,
    Y_COORD
FROM 
    TRAVEL_DATA.REGION_RAW_DATA.ACTIVITY_CONSUME as ac
JOIN 
    TRAVEL_DATA.REGION_PROCESSED_DATA.VISIT_AREA_INFO as vai
ON 
    ac.visit_area_id = vai.visit_area_id 
    AND ac.STORE_NM = vai.visit_area_NM;

-- 4-3. 이동 수단별 총 이용 금액
DROP TABLE IF EXISTS REGION_ANALYSIS.MVMN_PRICE;

CREATE TABLE REGION_ANALYSIS.MVMN_PRICE AS
    SELECT MC.MVMN_SE_NM, MC.PAYMENT_AMT_WON, T.TRAVEL_START_YMD
    FROM REGION_RAW_DATA.MVMN_CONSUME AS MC
    INNER JOIN REGION_RAW_DATA.TRAVEL AS T
        ON MC.TRAVEL_ID = T.TRAVEL_ID;

-- 6. 여행 지역별 방문수(x축), 평균 활동 소비 금액(y축) 버블차트
DROP TABLE IF EXISTS REGION_ANALYSIS.REGION_VISIT_ACTIVITY_BUBBLE;

CREATE TABLE REGION_ANALYSIS.REGION_VISIT_ACTIVITY_BUBBLE AS
SELECT
    V.VISIT_AREA_ID AS VISIT_AREA_ID,          
    V.VISIT_AREA_NM AS VISIT_AREA_NM,          
    V.SIDO AS SIDO,                            
    V.SGG AS SGG,                              
    V.SIDO_SGG AS SIDO_SGG,                    
    COUNT(V.VISIT_AREA_ID) AS VISIT_COUNT,     
    AVG(A.PAYMENT_AMT_WON) AS AVG_ACTIVITY_PRICE
FROM 
    REGION_PROCESSED_DATA.VISIT_AREA_INFO V
LEFT JOIN 
    REGION_RAW_DATA.ACTIVITY_CONSUME A
    ON V.VISIT_AREA_ID = A.VISIT_AREA_ID
GROUP BY 
    V.VISIT_AREA_ID, V.VISIT_AREA_NM, V.SIDO, V.SGG, V.SIDO_SGG
HAVING 
    -- 방문 횟수가 0 이상인 데이터만 포함
    COUNT(V.VISIT_AREA_ID) > 0
    -- 소비 금액이 존재하는 데이터만 포함 
    AND AVG(A.PAYMENT_AMT_WON) IS NOT NULL;     
